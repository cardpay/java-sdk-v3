/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import lombok.Data;

@Data

public class OAuthError {
  /**
   * Error code
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    REQUEST("INVALID_REQUEST"),
    
    GRANT("INVALID_GRANT"),
    
    TOKEN("INVALID_TOKEN");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String text) {
      for (NameEnum b : NameEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NameEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("name")
  private NameEnum name = null;
  @SerializedName("message")
  private String message = null;
  
  public void setName(NameEnum name) {
      this.name = name;
  }

  /**
   * @param name Error code
   * @return bean instance
   **/
  public OAuthError name(NameEnum name) {
      this.name = name;
      return this;
  }

  
  public void setMessage(String message) {
      this.message = message;
  }

  /**
   * @param message Error description
   * @return bean instance
   **/
  public OAuthError message(String message) {
      this.message = message;
      return this;
  }


  @Override
  public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append("OAuthError( ");
     
     if (name != null) sb.append("name=").append(name.toString()).append("; ");
     if (message != null) sb.append("message=").append(message.toString()).append("; ");
     sb.append(")");
     return sb.toString();
  }

}

