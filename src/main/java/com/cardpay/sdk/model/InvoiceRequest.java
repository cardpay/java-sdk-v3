/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import com.google.gson.annotations.SerializedName;
import java.util.ArrayList;
import java.util.List;
import lombok.Data;

@Data

public class InvoiceRequest {
  @SerializedName("request")
  private Request request = null;
  @SerializedName("customer")
  private Customer customer = null;
  @SerializedName("invoice_data")
  private InvoiceDataRequest invoiceData = null;
  @SerializedName("merchant_order")
  private MerchantOrder merchantOrder = null;
  @SerializedName("payment_methods")
  private List<String> paymentMethods = null;
  @SerializedName("return_urls")
  private ReturnUrls returnUrls = null;
  
  public void setRequest(Request request) {
      this.request = request;
  }

  /**
   * @param request Request
   * @return bean instance
   **/
  public InvoiceRequest request(Request request) {
      this.request = request;
      return this;
  }

  
  public void setCustomer(Customer customer) {
      this.customer = customer;
  }

  /**
   * @param customer customer
   * @return bean instance
   **/
  public InvoiceRequest customer(Customer customer) {
      this.customer = customer;
      return this;
  }

  
  public void setInvoiceData(InvoiceDataRequest invoiceData) {
      this.invoiceData = invoiceData;
  }

  /**
   * @param invoiceData invoiceData
   * @return bean instance
   **/
  public InvoiceRequest invoiceData(InvoiceDataRequest invoiceData) {
      this.invoiceData = invoiceData;
      return this;
  }

  
  public void setMerchantOrder(MerchantOrder merchantOrder) {
      this.merchantOrder = merchantOrder;
  }

  /**
   * @param merchantOrder merchantOrder
   * @return bean instance
   **/
  public InvoiceRequest merchantOrder(MerchantOrder merchantOrder) {
      this.merchantOrder = merchantOrder;
      return this;
  }

  
  public void setPaymentMethods(List<String> paymentMethods) {
      this.paymentMethods = paymentMethods;
  }

  /**
   * @param paymentMethods paymentMethods
   * @return bean instance
   **/
  public InvoiceRequest paymentMethods(List<String> paymentMethods) {
      this.paymentMethods = paymentMethods;
      return this;
  }

  public InvoiceRequest addPaymentMethodsItem(String paymentMethodsItem) {
    if (this.paymentMethods == null) {
      this.paymentMethods = new ArrayList<>();
    }
    this.paymentMethods.add(paymentMethodsItem);
    return this;
  }

  
  public void setReturnUrls(ReturnUrls returnUrls) {
      this.returnUrls = returnUrls;
  }

  /**
   * @param returnUrls returnUrls
   * @return bean instance
   **/
  public InvoiceRequest returnUrls(ReturnUrls returnUrls) {
      this.returnUrls = returnUrls;
      return this;
  }


  @Override
  public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append("InvoiceRequest( ");
     
     if (request != null) sb.append("request=").append(request.toString()).append("; ");
     if (customer != null) sb.append("customer=").append(customer.toString()).append("; ");
     if (invoiceData != null) sb.append("invoiceData=").append(invoiceData.toString()).append("; ");
     if (merchantOrder != null) sb.append("merchantOrder=").append(merchantOrder.toString()).append("; ");
     if (paymentMethods != null) sb.append("paymentMethods=").append(paymentMethods.toString()).append("; ");
     if (returnUrls != null) sb.append("returnUrls=").append(returnUrls.toString()).append("; ");
     sb.append(")");
     return sb.toString();
  }

}

