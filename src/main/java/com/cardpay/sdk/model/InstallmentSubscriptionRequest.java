/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import com.google.gson.annotations.SerializedName;
import lombok.Data;

@Data

public class InstallmentSubscriptionRequest {
  @SerializedName("request")
  private Request request = null;
  @SerializedName("card_account")
  private PaymentRequestCardAccount cardAccount = null;
  @SerializedName("customer")
  private RecurringCustomer customer = null;
  @SerializedName("merchant_order")
  private RecurringRequestMerchantOrder merchantOrder = null;
  @SerializedName("payment_method")
  private String paymentMethod = null;
  @SerializedName("recurring_data")
  private InstallmentData recurringData = null;
  @SerializedName("return_urls")
  private ReturnUrls returnUrls = null;
  
  public void setRequest(Request request) {
      this.request = request;
  }

  /**
   * @param request Request
   * @return bean instance
   **/
  public InstallmentSubscriptionRequest request(Request request) {
      this.request = request;
      return this;
  }

  
  public void setCardAccount(PaymentRequestCardAccount cardAccount) {
      this.cardAccount = cardAccount;
  }

  /**
   * @param cardAccount cardAccount
   * @return bean instance
   **/
  public InstallmentSubscriptionRequest cardAccount(PaymentRequestCardAccount cardAccount) {
      this.cardAccount = cardAccount;
      return this;
  }

  
  public void setCustomer(RecurringCustomer customer) {
      this.customer = customer;
  }

  /**
   * @param customer customer
   * @return bean instance
   **/
  public InstallmentSubscriptionRequest customer(RecurringCustomer customer) {
      this.customer = customer;
      return this;
  }

  
  public void setMerchantOrder(RecurringRequestMerchantOrder merchantOrder) {
      this.merchantOrder = merchantOrder;
  }

  /**
   * @param merchantOrder merchantOrder
   * @return bean instance
   **/
  public InstallmentSubscriptionRequest merchantOrder(RecurringRequestMerchantOrder merchantOrder) {
      this.merchantOrder = merchantOrder;
      return this;
  }

  
  public void setPaymentMethod(String paymentMethod) {
      this.paymentMethod = paymentMethod;
  }

  /**
   * @param paymentMethod paymentMethod
   * @return bean instance
   **/
  public InstallmentSubscriptionRequest paymentMethod(String paymentMethod) {
      this.paymentMethod = paymentMethod;
      return this;
  }

  
  public void setRecurringData(InstallmentData recurringData) {
      this.recurringData = recurringData;
  }

  /**
   * @param recurringData recurringData
   * @return bean instance
   **/
  public InstallmentSubscriptionRequest recurringData(InstallmentData recurringData) {
      this.recurringData = recurringData;
      return this;
  }

  
  public void setReturnUrls(ReturnUrls returnUrls) {
      this.returnUrls = returnUrls;
  }

  /**
   * @param returnUrls returnUrls
   * @return bean instance
   **/
  public InstallmentSubscriptionRequest returnUrls(ReturnUrls returnUrls) {
      this.returnUrls = returnUrls;
      return this;
  }


  @Override
  public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append("InstallmentSubscriptionRequest( ");
     
     if (request != null) sb.append("request=").append(request.toString()).append("; ");
     if (cardAccount != null) sb.append("cardAccount=").append(cardAccount.toString()).append("; ");
     if (customer != null) sb.append("customer=").append(customer.toString()).append("; ");
     if (merchantOrder != null) sb.append("merchantOrder=").append(merchantOrder.toString()).append("; ");
     if (paymentMethod != null) sb.append("paymentMethod=").append(paymentMethod.toString()).append("; ");
     if (recurringData != null) sb.append("recurringData=").append(recurringData.toString()).append("; ");
     if (returnUrls != null) sb.append("returnUrls=").append(returnUrls.toString()).append("; ");
     sb.append(")");
     return sb.toString();
  }

}

