/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a REST resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on OAuth 2.0 standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import lombok.Data;

@Data

public class PaymentResponseCustomer {
  @SerializedName("email")
  private String email = null;
  @SerializedName("full_name")
  private String fullName = null;
  @SerializedName("id")
  private String id = null;
  @SerializedName("ip")
  private String ip = null;
  @SerializedName("locale")
  private String locale = null;
  @SerializedName("phone")
  private String phone = null;
  
  public void setEmail(String email) {
      this.email = email;
  }

  /**
   * @param email Email address of the customer (mandatory by default for &#39;Asia’, &#39;Latin America’, &#39;NETELLER&#39;, &#39;DIRECTBANKINGNGA&#39;, &#39;AQRCODE&#39;, &#39;AIRTEL&#39;, &#39;MPESA&#39;, &#39;MTN&#39;, &#39;UGANDAMOBILE&#39;, &#39;VODAFONE&#39;, &#39;TIGO&#39; payment methods only)). Can be defined as optional by CardPay manager.
   * @return bean instance
   **/
  public PaymentResponseCustomer email(String email) {
      this.email = email;
      return this;
  }

  
  public void setFullName(String fullName) {
      this.fullName = fullName;
  }

  /**
   * @param fullName Customer&#39;s full name (mandatory for &#39;Asia’ payment method only)
   * @return bean instance
   **/
  public PaymentResponseCustomer fullName(String fullName) {
      this.fullName = fullName;
      return this;
  }

  
  public void setId(String id) {
      this.id = id;
  }

  /**
   * @param id Customer&#39;s ID in the merchant&#39;s system
   * @return bean instance
   **/
  public PaymentResponseCustomer id(String id) {
      this.id = id;
      return this;
  }

  
  public void setIp(String ip) {
      this.ip = ip;
  }

  /**
   * @param ip IP address of customer, present if wallet (terminal) settings has this option enabled. By default the option is not enabled
   * @return bean instance
   **/
  public PaymentResponseCustomer ip(String ip) {
      this.ip = ip;
      return this;
  }

  
  public void setLocale(String locale) {
      this.locale = locale;
  }

  /**
   * @param locale Preferred locale for the payment page ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) language code). The default locale will be applied if the selected locale is not supported. Supported locales are: &#x60;ru&#x60;, &#x60;en&#x60;, &#x60;zh&#x60;, &#x60;ja&#x60;
   * @return bean instance
   **/
  public PaymentResponseCustomer locale(String locale) {
      this.locale = locale;
      return this;
  }

  
  public void setPhone(String phone) {
      this.phone = phone;
  }

  /**
   * @param phone Customer&#39;s phone number. Mandatory for &#39;Asia’ and DIRECTBANKINGNGA payment methods. For other payment methods: optional by default, can be defined as mandatory by CardPay manager.
   * @return bean instance
   **/
  public PaymentResponseCustomer phone(String phone) {
      this.phone = phone;
      return this;
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentResponseCustomer {\n");
    
    if (email != null) sb.append("    email: ").append(toIndentedString(email)).append("\n");
    if (fullName != null) sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    if (id != null) sb.append("    id: ").append(toIndentedString(id)).append("\n");
    if (ip != null) sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    if (locale != null) sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    if (phone != null) sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


}

