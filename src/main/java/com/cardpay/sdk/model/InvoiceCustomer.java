/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import com.google.gson.annotations.SerializedName;
import lombok.Data;

@Data

public class InvoiceCustomer {
  @SerializedName("email")
  private String email = null;
  @SerializedName("id")
  private String id = null;
  @SerializedName("locale")
  private String locale = null;
  @SerializedName("phone")
  private String phone = null;
  
  public void setEmail(String email) {
      this.email = email;
  }

  /**
   * @param email Email address of the customer
   * @return bean instance
   **/
  public InvoiceCustomer email(String email) {
      this.email = email;
      return this;
  }

  
  public void setId(String id) {
      this.id = id;
  }

  /**
   * @param id Customer&#39;s ID in Merchant&#39;s system
   * @return bean instance
   **/
  public InvoiceCustomer id(String id) {
      this.id = id;
      return this;
  }

  
  public void setLocale(String locale) {
      this.locale = locale;
  }

  /**
   * @param locale Preferred locale for the payment page ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) language code). The default locale (en or other locale if it&#39;s set as default in Merchant account) will be applied if the selected locale (received in request) is not supported. Supported locales are: &#x60;ar&#x60;, &#x60;az&#x60;, &#x60;bg&#x60;, &#x60;cs&#x60;, &#x60;de&#x60;, &#x60;el&#x60;, &#x60;en&#x60;, &#x60;es&#x60;, &#x60;fr&#x60;, &#x60;hu&#x60;, &#x60;hy&#x60;, &#x60;id&#x60;, &#x60;it&#x60;, &#x60;ja&#x60;, &#x60;ka&#x60;, &#x60;ko&#x60;, &#x60;ms&#x60;, &#x60;nl&#x60;, &#x60;pl&#x60;, &#x60;pt&#x60;, &#x60;ro&#x60;, &#x60;ru&#x60;, &#x60;sr&#x60;, &#x60;sv&#x60;, &#x60;th&#x60;, &#x60;tr&#x60;, &#x60;uk&#x60;, &#x60;vi&#x60;, &#x60;zh&#x60;
   * @return bean instance
   **/
  public InvoiceCustomer locale(String locale) {
      this.locale = locale;
      return this;
  }

  
  public void setPhone(String phone) {
      this.phone = phone;
  }

  /**
   * @param phone Customer phone number
   * @return bean instance
   **/
  public InvoiceCustomer phone(String phone) {
      this.phone = phone;
      return this;
  }


  @Override
  public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append("InvoiceCustomer( ");
     
     if (email != null) sb.append("email=").append(email.toString()).append("; ");
     if (id != null) sb.append("id=").append(id.toString()).append("; ");
     if (locale != null) sb.append("locale=").append(locale.toString()).append("; ");
     if (phone != null) sb.append("phone=").append(phone.toString()).append("; ");
     sb.append(")");
     return sb.toString();
  }

}

