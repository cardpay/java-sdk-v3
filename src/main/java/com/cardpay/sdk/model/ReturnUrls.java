/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import com.google.gson.annotations.SerializedName;
import lombok.Data;

@Data

public class ReturnUrls {
  @SerializedName("cancel_url")
  private String cancelUrl = null;
  @SerializedName("decline_url")
  private String declineUrl = null;
  @SerializedName("inprocess_url")
  private String inprocessUrl = null;
  @SerializedName("return_url")
  private String returnUrl = null;
  @SerializedName("success_url")
  private String successUrl = null;
  
  public void setCancelUrl(String cancelUrl) {
      this.cancelUrl = cancelUrl;
  }

  /**
   * @param cancelUrl Overrides default cancel URL only
   * @return bean instance
   **/
  public ReturnUrls cancelUrl(String cancelUrl) {
      this.cancelUrl = cancelUrl;
      return this;
  }

  
  public void setDeclineUrl(String declineUrl) {
      this.declineUrl = declineUrl;
  }

  /**
   * @param declineUrl Overrides default decline URL only
   * @return bean instance
   **/
  public ReturnUrls declineUrl(String declineUrl) {
      this.declineUrl = declineUrl;
      return this;
  }

  
  public void setInprocessUrl(String inprocessUrl) {
      this.inprocessUrl = inprocessUrl;
  }

  /**
   * @param inprocessUrl Special URL for In process status of transaction
   * @return bean instance
   **/
  public ReturnUrls inprocessUrl(String inprocessUrl) {
      this.inprocessUrl = inprocessUrl;
      return this;
  }

  
  public void setReturnUrl(String returnUrl) {
      this.returnUrl = returnUrl;
  }

  /**
   * @param returnUrl Overrides default success URL, decline URL, cancel URL (only in Payment page mode), in process URL. return_url can be used separately or together with other URL parameters.
   * @return bean instance
   **/
  public ReturnUrls returnUrl(String returnUrl) {
      this.returnUrl = returnUrl;
      return this;
  }

  
  public void setSuccessUrl(String successUrl) {
      this.successUrl = successUrl;
  }

  /**
   * @param successUrl Overrides default success URL only
   * @return bean instance
   **/
  public ReturnUrls successUrl(String successUrl) {
      this.successUrl = successUrl;
      return this;
  }


  @Override
  public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append("ReturnUrls( ");
     
     if (cancelUrl != null) sb.append("cancelUrl=").append(cancelUrl.toString()).append("; ");
     if (declineUrl != null) sb.append("declineUrl=").append(declineUrl.toString()).append("; ");
     if (inprocessUrl != null) sb.append("inprocessUrl=").append(inprocessUrl.toString()).append("; ");
     if (returnUrl != null) sb.append("returnUrl=").append(returnUrl.toString()).append("; ");
     if (successUrl != null) sb.append("successUrl=").append(successUrl.toString()).append("; ");
     sb.append(")");
     return sb.toString();
  }

}

