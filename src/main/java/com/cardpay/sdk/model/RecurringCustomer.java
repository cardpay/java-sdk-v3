/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import lombok.Data;

@Data

public class RecurringCustomer {
  @SerializedName("email")
  private String email = null;
  @SerializedName("id")
  private String id = null;
  @SerializedName("ip")
  private String ip = null;
  /**
   * Preferred locale for the payment page ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) language code). The default locale will be applied if the selected locale is not supported. Supported locales are: &#x60;ru&#x60;, &#x60;en&#x60;, &#x60;zh&#x60;, &#x60;ja&#x60;
   */
  @JsonAdapter(LocaleEnum.Adapter.class)
  public enum LocaleEnum {
    RU("ru"),
    
    EN("en"),
    
    ZH("zh"),
    
    JA("ja");

    private String value;

    LocaleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocaleEnum fromValue(String text) {
      for (LocaleEnum b : LocaleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LocaleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocaleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocaleEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LocaleEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("locale")
  private LocaleEnum locale = null;
  @SerializedName("phone")
  private String phone = null;
  
  public void setEmail(String email) {
      this.email = email;
  }

  /**
   * @param email Customer&#39;s e-mail address. Mandatory by default, can be defined as optional by CardPay manager.
   * @return bean instance
   **/
  public RecurringCustomer email(String email) {
      this.email = email;
      return this;
  }

  
  public void setId(String id) {
      this.id = id;
  }

  /**
   * @param id Customer&#39;s ID in Merchant&#39;s system
   * @return bean instance
   **/
  public RecurringCustomer id(String id) {
      this.id = id;
      return this;
  }

  
  public void setIp(String ip) {
      this.ip = ip;
  }

  /**
   * @param ip Customer IPv4
   * @return bean instance
   **/
  public RecurringCustomer ip(String ip) {
      this.ip = ip;
      return this;
  }

  
  public void setLocale(LocaleEnum locale) {
      this.locale = locale;
  }

  /**
   * @param locale Preferred locale for the payment page ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) language code). The default locale will be applied if the selected locale is not supported. Supported locales are: &#x60;ru&#x60;, &#x60;en&#x60;, &#x60;zh&#x60;, &#x60;ja&#x60;
   * @return bean instance
   **/
  public RecurringCustomer locale(LocaleEnum locale) {
      this.locale = locale;
      return this;
  }

  
  public void setPhone(String phone) {
      this.phone = phone;
  }

  /**
   * @param phone Customer phone number. Optional by default, can be defined as mandatory by CardPay manager.
   * @return bean instance
   **/
  public RecurringCustomer phone(String phone) {
      this.phone = phone;
      return this;
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecurringCustomer {\n");
    
    if (email != null) sb.append("    email: ").append(toIndentedString(email)).append("\n");
    if (id != null) sb.append("    id: ").append(toIndentedString(id)).append("\n");
    if (ip != null) sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    if (locale != null) sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    if (phone != null) sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


}

