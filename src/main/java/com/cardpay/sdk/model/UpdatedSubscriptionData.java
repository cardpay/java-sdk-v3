/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.cardpay.sdk.model.RecurringResponseFiling;
import com.cardpay.sdk.model.UpdatedSubscriptionRecurringData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import lombok.Data;

@Data

public class UpdatedSubscriptionData {
  @SerializedName("change_status_claim_id")
  private String changeStatusClaimId = null;
  @SerializedName("details")
  private String details = null;
  @SerializedName("filing")
  private RecurringResponseFiling filing = null;
  @SerializedName("id")
  private String id = null;
  @SerializedName("is_executed")
  private Boolean isExecuted = null;
  @SerializedName("recurring_data")
  private UpdatedSubscriptionRecurringData recurringData = null;
  @SerializedName("remaining_amount")
  private BigDecimal remainingAmount = null;
  /**
   * Resulted status of subscription
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE"),
    
    CANCELLED("CANCELLED"),
    
    PAST_DUE("PAST_DUE"),
    
    PENDING("PENDING"),
    
    COMPLETED("COMPLETED"),
    
    CARD_EXPIRED("CARD_EXPIRED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;
  /**
   * Requested status of subscription. Mandatory for &#x60;CHANGE_STATUS&#x60; operation only.
   */
  @JsonAdapter(StatusToEnum.Adapter.class)
  public enum StatusToEnum {
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE"),
    
    CANCELLED("CANCELLED"),
    
    PAST_DUE("PAST_DUE"),
    
    PENDING("PENDING"),
    
    COMPLETED("COMPLETED"),
    
    CARD_EXPIRED("CARD_EXPIRED");

    private String value;

    StatusToEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusToEnum fromValue(String text) {
      for (StatusToEnum b : StatusToEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusToEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusToEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusToEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusToEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status_to")
  private StatusToEnum statusTo = null;
  @SerializedName("updated")
  private OffsetDateTime updated = null;
  
  public void setChangeStatusClaimId(String changeStatusClaimId) {
      this.changeStatusClaimId = changeStatusClaimId;
  }

  /**
   * @param changeStatusClaimId ID of claim; appears in case of request change was processed asynchronously and put in queue. Mandatory if request was put in queue.
   * @return bean instance
   **/
  public UpdatedSubscriptionData changeStatusClaimId(String changeStatusClaimId) {
      this.changeStatusClaimId = changeStatusClaimId;
      return this;
  }

  
  public void setDetails(String details) {
      this.details = details;
  }

  /**
   * @param details Operation details, errors, etc.
   * @return bean instance
   **/
  public UpdatedSubscriptionData details(String details) {
      this.details = details;
      return this;
  }

  
  public void setFiling(RecurringResponseFiling filing) {
      this.filing = filing;
  }

  /**
   * @param filing Filing data
   * @return bean instance
   **/
  public UpdatedSubscriptionData filing(RecurringResponseFiling filing) {
      this.filing = filing;
      return this;
  }

  
  public void setId(String id) {
      this.id = id;
  }

  /**
   * @param id ID of subscription
   * @return bean instance
   **/
  public UpdatedSubscriptionData id(String id) {
      this.id = id;
      return this;
  }

  
  public void setIsExecuted(Boolean isExecuted) {
      this.isExecuted = isExecuted;
  }

  /**
   * @param isExecuted Status of operation
   * @return bean instance
   **/
  public UpdatedSubscriptionData isExecuted(Boolean isExecuted) {
      this.isExecuted = isExecuted;
      return this;
  }

  
  public void setRecurringData(UpdatedSubscriptionRecurringData recurringData) {
      this.recurringData = recurringData;
  }

  /**
   * @param recurringData Recurring data
   * @return bean instance
   **/
  public UpdatedSubscriptionData recurringData(UpdatedSubscriptionRecurringData recurringData) {
      this.recurringData = recurringData;
      return this;
  }

  
  public void setRemainingAmount(BigDecimal remainingAmount) {
      this.remainingAmount = remainingAmount;
  }

  /**
   * @param remainingAmount The amount remained to be paid after repayment operation. Mandatory for &#x60;REPAYMENT&#x60; operation only
   * @return bean instance
   **/
  public UpdatedSubscriptionData remainingAmount(BigDecimal remainingAmount) {
      this.remainingAmount = remainingAmount;
      return this;
  }

  
  public void setStatus(StatusEnum status) {
      this.status = status;
  }

  /**
   * @param status Resulted status of subscription
   * @return bean instance
   **/
  public UpdatedSubscriptionData status(StatusEnum status) {
      this.status = status;
      return this;
  }

  
  public void setStatusTo(StatusToEnum statusTo) {
      this.statusTo = statusTo;
  }

  /**
   * @param statusTo Requested status of subscription. Mandatory for &#x60;CHANGE_STATUS&#x60; operation only.
   * @return bean instance
   **/
  public UpdatedSubscriptionData statusTo(StatusToEnum statusTo) {
      this.statusTo = statusTo;
      return this;
  }

  
  public void setUpdated(OffsetDateTime updated) {
      this.updated = updated;
  }

  /**
   * @param updated If request is successful then date and time returned in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (format - yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;).
   * @return bean instance
   **/
  public UpdatedSubscriptionData updated(OffsetDateTime updated) {
      this.updated = updated;
      return this;
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatedSubscriptionData {\n");
    
    if (changeStatusClaimId != null) sb.append("    changeStatusClaimId: ").append(toIndentedString(changeStatusClaimId)).append("\n");
    if (details != null) sb.append("    details: ").append(toIndentedString(details)).append("\n");
    if (filing != null) sb.append("    filing: ").append(toIndentedString(filing)).append("\n");
    if (id != null) sb.append("    id: ").append(toIndentedString(id)).append("\n");
    if (isExecuted != null) sb.append("    isExecuted: ").append(toIndentedString(isExecuted)).append("\n");
    if (recurringData != null) sb.append("    recurringData: ").append(toIndentedString(recurringData)).append("\n");
    if (remainingAmount != null) sb.append("    remainingAmount: ").append(toIndentedString(remainingAmount)).append("\n");
    if (status != null) sb.append("    status: ").append(toIndentedString(status)).append("\n");
    if (statusTo != null) sb.append("    statusTo: ").append(toIndentedString(statusTo)).append("\n");
    if (updated != null) sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


}

