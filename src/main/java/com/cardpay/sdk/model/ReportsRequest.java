/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import com.google.gson.annotations.SerializedName;
import lombok.Data;

@Data

public class ReportsRequest {
  @SerializedName("callback_url")
  private String callbackUrl = null;
  @SerializedName("reports_data")
  private ReportsData reportsData = null;
  @SerializedName("request")
  private Request request = null;
  
  public void setCallbackUrl(String callbackUrl) {
      this.callbackUrl = callbackUrl;
  }

  /**
   * @param callbackUrl Url for sending resulted callback. If field is skipped then callback won&#39;t be sent.  Common requirements for callback are actual https://integration.cardpay-test.com/#callbacks
   * @return bean instance
   **/
  public ReportsRequest callbackUrl(String callbackUrl) {
      this.callbackUrl = callbackUrl;
      return this;
  }

  
  public void setReportsData(ReportsData reportsData) {
      this.reportsData = reportsData;
  }

  /**
   * @param reportsData ReportsData
   * @return bean instance
   **/
  public ReportsRequest reportsData(ReportsData reportsData) {
      this.reportsData = reportsData;
      return this;
  }

  
  public void setRequest(Request request) {
      this.request = request;
  }

  /**
   * @param request Request
   * @return bean instance
   **/
  public ReportsRequest request(Request request) {
      this.request = request;
      return this;
  }


  @Override
  public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append("ReportsRequest( ");
     
     if (callbackUrl != null) sb.append("callbackUrl=").append(callbackUrl.toString()).append("; ");
     if (reportsData != null) sb.append("reportsData=").append(reportsData.toString()).append("; ");
     if (request != null) sb.append("request=").append(request.toString()).append("; ");
     sb.append(")");
     return sb.toString();
  }

}

