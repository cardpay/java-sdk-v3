/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.cardpay.sdk.model.BillingAddress;
import com.cardpay.sdk.model.PayoutRequestCard;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import lombok.Data;

@Data

public class PayoutRequestCardAccount {
  @SerializedName("billing_address")
  private BillingAddress billingAddress = null;
  @SerializedName("card")
  private PayoutRequestCard card = null;
  @SerializedName("recipient_info")
  private String recipientInfo = null;
  @SerializedName("token")
  private String token = null;
  
  public void setBillingAddress(BillingAddress billingAddress) {
      this.billingAddress = billingAddress;
  }

  /**
   * @param billingAddress Address for billing
   * @return bean instance
   **/
  public PayoutRequestCardAccount billingAddress(BillingAddress billingAddress) {
      this.billingAddress = billingAddress;
      return this;
  }

  
  public void setCard(PayoutRequestCard card) {
      this.card = card;
  }

  /**
   * @param card Represents a payout card data. Card section shouldn&#39;t be present if element &#x60;token&#x60; was presented.
   * @return bean instance
   **/
  public PayoutRequestCardAccount card(PayoutRequestCard card) {
      this.card = card;
      return this;
  }

  
  public void setRecipientInfo(String recipientInfo) {
      this.recipientInfo = recipientInfo;
  }

  /**
   * @param recipientInfo Property &#x60;recipient_info&#x60; may be required by Bank. In most cases it&#39;s Cardholder&#39;s name, contact CardPay manager for requirements. It must be omitted when property &#x60;token&#x60; is presented
   * @return bean instance
   **/
  public PayoutRequestCardAccount recipientInfo(String recipientInfo) {
      this.recipientInfo = recipientInfo;
      return this;
  }

  
  public void setToken(String token) {
      this.token = token;
  }

  /**
   * @param token Card token value, used instead of a card data
   * @return bean instance
   **/
  public PayoutRequestCardAccount token(String token) {
      this.token = token;
      return this;
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayoutRequestCardAccount {\n");
    
    if (billingAddress != null) sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    if (card != null) sb.append("    card: ").append(toIndentedString(card)).append("\n");
    if (recipientInfo != null) sb.append("    recipientInfo: ").append(toIndentedString(recipientInfo)).append("\n");
    if (token != null) sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


}

