/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import com.google.gson.annotations.SerializedName;
import java.math.BigDecimal;
import lombok.Data;

@Data

public class Item {
  @SerializedName("count")
  private Integer count = null;
  @SerializedName("description")
  private String description = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("price")
  private BigDecimal price = null;
  
  public void setCount(Integer count) {
      this.count = count;
  }

  /**
   * minimum: 1
   * @param count The count of product / service, provided to Customer. Any positive number
   * @return bean instance
   **/
  public Item count(Integer count) {
      this.count = count;
      return this;
  }

  
  public void setDescription(String description) {
      this.description = description;
  }

  /**
   * @param description The description of product / service, provided to Customer
   * @return bean instance
   **/
  public Item description(String description) {
      this.description = description;
      return this;
  }

  
  public void setName(String name) {
      this.name = name;
  }

  /**
   * @param name The name of product / service, provided to Customer
   * @return bean instance
   **/
  public Item name(String name) {
      this.name = name;
      return this;
  }

  
  public void setPrice(BigDecimal price) {
      this.price = price;
  }

  /**
   * @param price Price of product / service with dot as a decimal separator, must be less than 1 million
   * @return bean instance
   **/
  public Item price(BigDecimal price) {
      this.price = price;
      return this;
  }


  @Override
  public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append("Item( ");
     
     if (count != null) sb.append("count=").append(count.toString()).append("; ");
     if (description != null) sb.append("description=").append(description.toString()).append("; ");
     if (name != null) sb.append("name=").append(name.toString()).append("; ");
     if (price != null) sb.append("price=").append(price.toString()).append("; ");
     sb.append(")");
     return sb.toString();
  }

}

