/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import com.google.gson.annotations.SerializedName;
import lombok.Data;

@Data

public class PaymentRequestEWalletAccount {
  @SerializedName("bank_code")
  private String bankCode = null;
  @SerializedName("creation_date")
  private String creationDate = null;
  @SerializedName("expiration_date")
  private String expirationDate = null;
  @SerializedName("id")
  private String id = null;
  @SerializedName("verification_code")
  private String verificationCode = null;
  
  public void setBankCode(String bankCode) {
      this.bankCode = bankCode;
  }

  /**
   * @param bankCode Card issuer&#39;s code. For DIRECTBANKINGNGA: Customer bank code (3 digits). Mandatory for DIRECTBANKINGNGA payment method only.
   * @return bean instance
   **/
  public PaymentRequestEWalletAccount bankCode(String bankCode) {
      this.bankCode = bankCode;
      return this;
  }

  
  public void setCreationDate(String creationDate) {
      this.creationDate = creationDate;
  }

  /**
   * @param creationDate Card creation date
   * @return bean instance
   **/
  public PaymentRequestEWalletAccount creationDate(String creationDate) {
      this.creationDate = creationDate;
      return this;
  }

  
  public void setExpirationDate(String expirationDate) {
      this.expirationDate = expirationDate;
  }

  /**
   * @param expirationDate Account expiration date
   * @return bean instance
   **/
  public PaymentRequestEWalletAccount expirationDate(String expirationDate) {
      this.expirationDate = expirationDate;
      return this;
  }

  
  public void setId(String id) {
      this.id = id;
  }

  /**
   * @param id For QIWI: Customer phone number (from 1 to 15 digits). For NETELLER: email address of Customer. For &#39;Latin America&#39;: Customer personal identification number: CPF or CNPJ for Brazil, DNI for Argentina and ID for other countries. For AIRTEL, MPESA, MTN, UGANDAMOBILE, VODAFONE and TIGO: phone number linked to Customer&#39;s mobile money account. For DIRECTBANKINGNGA: bank account number Mandatory for QIWI, NETELLER, &#39;Latin America&#39;, AIRTEL, MPESA, MTN, UGANDAMOBILE, VODAFONE, TIGO and DIRECTBANKINGNGA payment methods only.
   * @return bean instance
   **/
  public PaymentRequestEWalletAccount id(String id) {
      this.id = id;
      return this;
  }

  
  public void setVerificationCode(String verificationCode) {
      this.verificationCode = verificationCode;
  }

  /**
   * @param verificationCode Provider security code. For NETELLER: member&#39;s 6 digits Secure Id or Google Authenticator OTP For VODAFONE: Customer voucher code (6 digits) For UBA bank in DIRECTBANKINGNGA: Customer BVN (bank verification number) number, 11 digits Mandatory for NETELLER, VODAFONE and DIRECTBANKINGNGA payment methods only.
   * @return bean instance
   **/
  public PaymentRequestEWalletAccount verificationCode(String verificationCode) {
      this.verificationCode = verificationCode;
      return this;
  }


  @Override
  public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append("PaymentRequestEWalletAccount( ");
     
     if (bankCode != null) sb.append("bankCode=").append(bankCode.toString()).append("; ");
     if (creationDate != null) sb.append("creationDate=").append(creationDate.toString()).append("; ");
     if (expirationDate != null) sb.append("expirationDate=").append(expirationDate.toString()).append("; ");
     if (id != null) sb.append("id=").append(id.toString()).append("; ");
     if (verificationCode != null) sb.append("verificationCode=").append(verificationCode.toString()).append("; ");
     sb.append(")");
     return sb.toString();
  }

}

