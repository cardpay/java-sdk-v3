/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import com.google.gson.annotations.SerializedName;
import lombok.Data;

@Data

public class RefundRequest {
  @SerializedName("request")
  private Request request = null;
  @SerializedName("customer")
  private RefundRequestCustomer customer = null;
  @SerializedName("ewallet_account")
  private RefundRequestEWalletAccount ewalletAccount = null;
  @SerializedName("merchant_order")
  private RefundRequestMerchantOrder merchantOrder = null;
  @SerializedName("payment_data")
  private RefundRequestPaymentData paymentData = null;
  @SerializedName("refund_data")
  private RefundRequestRefundData refundData = null;
  
  public void setRequest(Request request) {
      this.request = request;
  }

  /**
   * @param request Request
   * @return bean instance
   **/
  public RefundRequest request(Request request) {
      this.request = request;
      return this;
  }

  
  public void setCustomer(RefundRequestCustomer customer) {
      this.customer = customer;
  }

  /**
   * @param customer Customer
   * @return bean instance
   **/
  public RefundRequest customer(RefundRequestCustomer customer) {
      this.customer = customer;
      return this;
  }

  
  public void setEwalletAccount(RefundRequestEWalletAccount ewalletAccount) {
      this.ewalletAccount = ewalletAccount;
  }

  /**
   * @param ewalletAccount EWallet
   * @return bean instance
   **/
  public RefundRequest ewalletAccount(RefundRequestEWalletAccount ewalletAccount) {
      this.ewalletAccount = ewalletAccount;
      return this;
  }

  
  public void setMerchantOrder(RefundRequestMerchantOrder merchantOrder) {
      this.merchantOrder = merchantOrder;
  }

  /**
   * @param merchantOrder Merchant order data
   * @return bean instance
   **/
  public RefundRequest merchantOrder(RefundRequestMerchantOrder merchantOrder) {
      this.merchantOrder = merchantOrder;
      return this;
  }

  
  public void setPaymentData(RefundRequestPaymentData paymentData) {
      this.paymentData = paymentData;
  }

  /**
   * @param paymentData Payment data
   * @return bean instance
   **/
  public RefundRequest paymentData(RefundRequestPaymentData paymentData) {
      this.paymentData = paymentData;
      return this;
  }

  
  public void setRefundData(RefundRequestRefundData refundData) {
      this.refundData = refundData;
  }

  /**
   * @param refundData Refund data
   * @return bean instance
   **/
  public RefundRequest refundData(RefundRequestRefundData refundData) {
      this.refundData = refundData;
      return this;
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefundRequest {\n");
    
    if (request != null) sb.append("    request: ").append(toIndentedString(request)).append("\n");
    if (customer != null) sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    if (ewalletAccount != null) sb.append("    ewalletAccount: ").append(toIndentedString(ewalletAccount)).append("\n");
    if (merchantOrder != null) sb.append("    merchantOrder: ").append(toIndentedString(merchantOrder)).append("\n");
    if (paymentData != null) sb.append("    paymentData: ").append(toIndentedString(paymentData)).append("\n");
    if (refundData != null) sb.append("    refundData: ").append(toIndentedString(refundData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


}

