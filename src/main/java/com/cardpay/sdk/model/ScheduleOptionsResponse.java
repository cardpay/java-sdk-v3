/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import com.google.gson.annotations.SerializedName;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import lombok.Data;

@Data

public class ScheduleOptionsResponse {
  @SerializedName("currency")
  private String currency = null;
  @SerializedName("options")
  private List<ScheduleOption> options = null;
  @SerializedName("total_amount")
  private BigDecimal totalAmount = null;
  
  public void setCurrency(String currency) {
      this.currency = currency;
  }

  /**
   * @param currency [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code
   * @return bean instance
   **/
  public ScheduleOptionsResponse currency(String currency) {
      this.currency = currency;
      return this;
  }

  
  public void setOptions(List<ScheduleOption> options) {
      this.options = options;
  }

  /**
   * @param options Array of the calculated options data.
   * @return bean instance
   **/
  public ScheduleOptionsResponse options(List<ScheduleOption> options) {
      this.options = options;
      return this;
  }

  public ScheduleOptionsResponse addOptionsItem(ScheduleOption optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  
  public void setTotalAmount(BigDecimal totalAmount) {
      this.totalAmount = totalAmount;
  }

  /**
   * @param totalAmount Total amount of subscription to be calculated to options; can have dot as a decimal separator.
   * @return bean instance
   **/
  public ScheduleOptionsResponse totalAmount(BigDecimal totalAmount) {
      this.totalAmount = totalAmount;
      return this;
  }


  @Override
  public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append("ScheduleOptionsResponse( ");
     
     if (currency != null) sb.append("currency=").append(currency.toString()).append("; ");
     if (options != null) sb.append("options=").append(options.toString()).append("; ");
     if (totalAmount != null) sb.append("totalAmount=").append(totalAmount.toString()).append("; ");
     sb.append(")");
     return sb.toString();
  }

}

