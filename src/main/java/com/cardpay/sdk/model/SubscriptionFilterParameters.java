/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import lombok.Data;

@Data

public class SubscriptionFilterParameters {
  @SerializedName("request_id")
  private String requestId = null;
  @SerializedName("max_count")
  private Integer maxCount = null;
  @SerializedName("offset")
  private Integer offset = null;
  @SerializedName("sort_order")
  private String sortOrder = null;
  @SerializedName("customer_id")
  private String customerId = null;
  @SerializedName("plan_id")
  private String planId = null;
  @SerializedName("start_time")
  private OffsetDateTime startTime = null;
  @SerializedName("end_time")
  private OffsetDateTime endTime = null;
  @SerializedName("currency")
  private String currency = null;
  /**
   * Status of subscription
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE"),
    
    CANCELLED("CANCELLED"),
    
    PAST_DUE("PAST_DUE"),
    
    PENDING("PENDING"),
    
    COMPLETED("COMPLETED"),
    
    CARD_EXPIRED("CARD_EXPIRED"),
    
    ACTIVATION_FAILED("ACTIVATION_FAILED"),
    
    UNPAID("UNPAID"),
    
    WAITING("WAITING");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;
  /**
   * Type of subscription. &#39;ONECLICK&#39; type will be ignored.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ONECLICK("ONECLICK"),
    
    SCHEDULED("SCHEDULED"),
    
    INSTALLMENT("INSTALLMENT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;
  
  public void setRequestId(String requestId) {
      this.requestId = requestId;
  }

  /**
   * @param requestId Request ID
   * @return bean instance
   **/
  public SubscriptionFilterParameters requestId(String requestId) {
      this.requestId = requestId;
      return this;
  }

  
  public void setMaxCount(Integer maxCount) {
      this.maxCount = maxCount;
  }

  /**
   * minimum: 1
   * maximum: 10000
   * @param maxCount Limit number of returned subscriptions (must be less than 10000, default is 1000)
   * @return bean instance
   **/
  public SubscriptionFilterParameters maxCount(Integer maxCount) {
      this.maxCount = maxCount;
      return this;
  }

  
  public void setOffset(Integer offset) {
      this.offset = offset;
  }

  /**
   * minimum: 0
   * maximum: 10000
   * @param offset Offset (must be less than 10000)
   * @return bean instance
   **/
  public SubscriptionFilterParameters offset(Integer offset) {
      this.offset = offset;
      return this;
  }

  
  public void setSortOrder(String sortOrder) {
      this.sortOrder = sortOrder;
  }

  /**
   * @param sortOrder Sort based on order of results. &#39;asc&#39; for ascending order or &#39;desc&#39; for descending order (default value)
   * @return bean instance
   **/
  public SubscriptionFilterParameters sortOrder(String sortOrder) {
      this.sortOrder = sortOrder;
      return this;
  }

  
  public void setCustomerId(String customerId) {
      this.customerId = customerId;
  }

  /**
   * @param customerId Merchant identifier of customer account
   * @return bean instance
   **/
  public SubscriptionFilterParameters customerId(String customerId) {
      this.customerId = customerId;
      return this;
  }

  
  public void setPlanId(String planId) {
      this.planId = planId;
  }

  /**
   * @param planId Id of plan. Use for searching scheduled subscriptions by plan
   * @return bean instance
   **/
  public SubscriptionFilterParameters planId(String planId) {
      this.planId = planId;
      return this;
  }

  
  public void setStartTime(OffsetDateTime startTime) {
      this.startTime = startTime;
  }

  /**
   * @param startTime Date and time up to milliseconds (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when requested period starts (inclusive), UTC time, default is 24 hours before &#39;end_time&#39; (format: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;)
   * @return bean instance
   **/
  public SubscriptionFilterParameters startTime(OffsetDateTime startTime) {
      this.startTime = startTime;
      return this;
  }

  
  public void setEndTime(OffsetDateTime endTime) {
      this.endTime = endTime;
  }

  /**
   * @param endTime Date and time up to milliseconds (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when requested period ends (not inclusive), UTC time, must be less than 7 days after &#39;start_time&#39;, default is current time (format: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;)
   * @return bean instance
   **/
  public SubscriptionFilterParameters endTime(OffsetDateTime endTime) {
      this.endTime = endTime;
      return this;
  }

  
  public void setCurrency(String currency) {
      this.currency = currency;
  }

  /**
   * @param currency [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of transactions currency
   * @return bean instance
   **/
  public SubscriptionFilterParameters currency(String currency) {
      this.currency = currency;
      return this;
  }

  
  public void setStatus(StatusEnum status) {
      this.status = status;
  }

  /**
   * @param status Status of subscription
   * @return bean instance
   **/
  public SubscriptionFilterParameters status(StatusEnum status) {
      this.status = status;
      return this;
  }

  
  public void setType(TypeEnum type) {
      this.type = type;
  }

  /**
   * @param type Type of subscription. &#39;ONECLICK&#39; type will be ignored.
   * @return bean instance
   **/
  public SubscriptionFilterParameters type(TypeEnum type) {
      this.type = type;
      return this;
  }


  @Override
  public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append("SubscriptionFilterParameters( ");
     
     if (requestId != null) sb.append("requestId=").append(requestId.toString()).append("; ");
     if (maxCount != null) sb.append("maxCount=").append(maxCount.toString()).append("; ");
     if (offset != null) sb.append("offset=").append(offset.toString()).append("; ");
     if (sortOrder != null) sb.append("sortOrder=").append(sortOrder.toString()).append("; ");
     if (customerId != null) sb.append("customerId=").append(customerId.toString()).append("; ");
     if (planId != null) sb.append("planId=").append(planId.toString()).append("; ");
     if (startTime != null) sb.append("startTime=").append(startTime.toString()).append("; ");
     if (endTime != null) sb.append("endTime=").append(endTime.toString()).append("; ");
     if (currency != null) sb.append("currency=").append(currency.toString()).append("; ");
     if (status != null) sb.append("status=").append(status.toString()).append("; ");
     if (type != null) sb.append("type=").append(type.toString()).append("; ");
     sb.append(")");
     return sb.toString();
  }

}

