/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import lombok.Data;

@Data

public class PayoutRequestCustomer {
  @SerializedName("address")
  private String address = null;
  @SerializedName("city")
  private String city = null;
  @SerializedName("document_number")
  private String documentNumber = null;
  @SerializedName("document_type")
  private String documentType = null;
  @SerializedName("email")
  private String email = null;
  @SerializedName("first_name")
  private String firstName = null;
  @SerializedName("full_name")
  private String fullName = null;
  @SerializedName("id")
  private String id = null;
  @SerializedName("last_name")
  private String lastName = null;
  @SerializedName("phone")
  private String phone = null;
  @SerializedName("province")
  private String province = null;
  
  public void setAddress(String address) {
      this.address = address;
  }

  /**
   * @param address Customer address *(mandatory for &#39;Latin America&#39; methods only)* For &#39;Latin America&#39; is required for methods where country &#x3D; CO
   * @return bean instance
   **/
  public PayoutRequestCustomer address(String address) {
      this.address = address;
      return this;
  }

  
  public void setCity(String city) {
      this.city = city;
  }

  /**
   * @param city Customer city.
   * @return bean instance
   **/
  public PayoutRequestCustomer city(String city) {
      this.city = city;
      return this;
  }

  
  public void setDocumentNumber(String documentNumber) {
      this.documentNumber = documentNumber;
  }

  /**
   * @param documentNumber Customer document number *(mandatory for &#39;Latin America&#39; methods only)* For &#39;Latin America&#39; is required for methods where country &#x3D; AR, BR, CL, CO, PE, UY
   * @return bean instance
   **/
  public PayoutRequestCustomer documentNumber(String documentNumber) {
      this.documentNumber = documentNumber;
      return this;
  }

  
  public void setDocumentType(String documentType) {
      this.documentType = documentType;
  }

  /**
   * @param documentType Customer document type *(mandatory for &#39;Latin America&#39; methods only)* For &#39;Latin America&#39; is required for methods where country &#x3D; CO, PE
   * @return bean instance
   **/
  public PayoutRequestCustomer documentType(String documentType) {
      this.documentType = documentType;
      return this;
  }

  
  public void setEmail(String email) {
      this.email = email;
  }

  /**
   * @param email Customer e-mail address *(mandatory for &#39;Latin America&#39; methods only)* For &#39;Latin America&#39; is required for methods where country &#x3D; CO
   * @return bean instance
   **/
  public PayoutRequestCustomer email(String email) {
      this.email = email;
      return this;
  }

  
  public void setFirstName(String firstName) {
      this.firstName = firstName;
  }

  /**
   * @param firstName Customer first name *(mandatory for &#39;Latin America&#39; methods only)*
   * @return bean instance
   **/
  public PayoutRequestCustomer firstName(String firstName) {
      this.firstName = firstName;
      return this;
  }

  
  public void setFullName(String fullName) {
      this.fullName = fullName;
  }

  /**
   * @param fullName Customer full name. Mandatory for DIRECTBANKINGNGA methods only: For DIRECTBANKINGNGA: only for non NGN currency
   * @return bean instance
   **/
  public PayoutRequestCustomer fullName(String fullName) {
      this.fullName = fullName;
      return this;
  }

  
  public void setId(String id) {
      this.id = id;
  }

  /**
   * @param id Customer id *(mandatory for WEBMONEY method only)*
   * @return bean instance
   **/
  public PayoutRequestCustomer id(String id) {
      this.id = id;
      return this;
  }

  
  public void setLastName(String lastName) {
      this.lastName = lastName;
  }

  /**
   * @param lastName Customer last name *(mandatory for &#39;Latin America&#39; methods only)* For &#39;Latin America&#39; is required for methods where country &#x3D; AR, BR, CO, MX, PE, UY
   * @return bean instance
   **/
  public PayoutRequestCustomer lastName(String lastName) {
      this.lastName = lastName;
      return this;
  }

  
  public void setPhone(String phone) {
      this.phone = phone;
  }

  /**
   * @param phone Customer&#39;s phone number
   * @return bean instance
   **/
  public PayoutRequestCustomer phone(String phone) {
      this.phone = phone;
      return this;
  }

  
  public void setProvince(String province) {
      this.province = province;
  }

  /**
   * @param province Customer province.
   * @return bean instance
   **/
  public PayoutRequestCustomer province(String province) {
      this.province = province;
      return this;
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayoutRequestCustomer {\n");
    
    if (address != null) sb.append("    address: ").append(toIndentedString(address)).append("\n");
    if (city != null) sb.append("    city: ").append(toIndentedString(city)).append("\n");
    if (documentNumber != null) sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    if (documentType != null) sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    if (email != null) sb.append("    email: ").append(toIndentedString(email)).append("\n");
    if (firstName != null) sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    if (fullName != null) sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    if (id != null) sb.append("    id: ").append(toIndentedString(id)).append("\n");
    if (lastName != null) sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    if (phone != null) sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    if (province != null) sb.append("    province: ").append(toIndentedString(province)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


}

