/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import com.google.gson.annotations.SerializedName;
import lombok.Data;

@Data

public class PaymentCallback {
  @SerializedName("callback_time")
  private String callbackTime = null;
  @SerializedName("card_account")
  private PaymentResponseCardAccount cardAccount = null;
  @SerializedName("cryptocurrency_account")
  private PaymentResponseCryptocurrencyAccount cryptocurrencyAccount = null;
  @SerializedName("customer")
  private PaymentRequestCustomer customer = null;
  @SerializedName("ewallet_account")
  private TransactionResponseEWalletAccount ewalletAccount = null;
  @SerializedName("merchant_order")
  private TransactionResponseMerchantOrder merchantOrder = null;
  @SerializedName("payment_data")
  private PaymentResponsePaymentData paymentData = null;
  @SerializedName("payment_method")
  private String paymentMethod = null;
  
  public void setCallbackTime(String callbackTime) {
      this.callbackTime = callbackTime;
  }

  /**
   * @param callbackTime Date and time of created callback in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format
   * @return bean instance
   **/
  public PaymentCallback callbackTime(String callbackTime) {
      this.callbackTime = callbackTime;
      return this;
  }

  
  public void setCardAccount(PaymentResponseCardAccount cardAccount) {
      this.cardAccount = cardAccount;
  }

  /**
   * @param cardAccount Card account data *(for BANKCARD payment method only)*
   * @return bean instance
   **/
  public PaymentCallback cardAccount(PaymentResponseCardAccount cardAccount) {
      this.cardAccount = cardAccount;
      return this;
  }

  
  public void setCryptocurrencyAccount(PaymentResponseCryptocurrencyAccount cryptocurrencyAccount) {
      this.cryptocurrencyAccount = cryptocurrencyAccount;
  }

  /**
   * @param cryptocurrencyAccount Cryptocurrency account data *(for BITCOIN payment method only)*
   * @return bean instance
   **/
  public PaymentCallback cryptocurrencyAccount(PaymentResponseCryptocurrencyAccount cryptocurrencyAccount) {
      this.cryptocurrencyAccount = cryptocurrencyAccount;
      return this;
  }

  
  public void setCustomer(PaymentRequestCustomer customer) {
      this.customer = customer;
  }

  /**
   * @param customer Customer data
   * @return bean instance
   **/
  public PaymentCallback customer(PaymentRequestCustomer customer) {
      this.customer = customer;
      return this;
  }

  
  public void setEwalletAccount(TransactionResponseEWalletAccount ewalletAccount) {
      this.ewalletAccount = ewalletAccount;
  }

  /**
   * @param ewalletAccount eWallet account data *(for ALIPAY, QIWI, WEBMONEY, NETELLER, YANDEXMONEY, DIRECTBANKINGNGA, AQRCODE, AIRTEL, MPESA, MTN, UGANDAMOBILE, VODAFONE, TIGO and &#39;Latin America&#39; payment methods only)*
   * @return bean instance
   **/
  public PaymentCallback ewalletAccount(TransactionResponseEWalletAccount ewalletAccount) {
      this.ewalletAccount = ewalletAccount;
      return this;
  }

  
  public void setMerchantOrder(TransactionResponseMerchantOrder merchantOrder) {
      this.merchantOrder = merchantOrder;
  }

  /**
   * @param merchantOrder Merchant order data
   * @return bean instance
   **/
  public PaymentCallback merchantOrder(TransactionResponseMerchantOrder merchantOrder) {
      this.merchantOrder = merchantOrder;
      return this;
  }

  
  public void setPaymentData(PaymentResponsePaymentData paymentData) {
      this.paymentData = paymentData;
  }

  /**
   * @param paymentData Payment data
   * @return bean instance
   **/
  public PaymentCallback paymentData(PaymentResponsePaymentData paymentData) {
      this.paymentData = paymentData;
      return this;
  }

  
  public void setPaymentMethod(String paymentMethod) {
      this.paymentMethod = paymentMethod;
  }

  /**
   * @param paymentMethod Used payment method type name from payment methods list
   * @return bean instance
   **/
  public PaymentCallback paymentMethod(String paymentMethod) {
      this.paymentMethod = paymentMethod;
      return this;
  }


  @Override
  public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append("PaymentCallback( ");
     
     if (callbackTime != null) sb.append("callbackTime=").append(callbackTime.toString()).append("; ");
     if (cardAccount != null) sb.append("cardAccount=").append(cardAccount.toString()).append("; ");
     if (cryptocurrencyAccount != null) sb.append("cryptocurrencyAccount=").append(cryptocurrencyAccount.toString()).append("; ");
     if (customer != null) sb.append("customer=").append(customer.toString()).append("; ");
     if (ewalletAccount != null) sb.append("ewalletAccount=").append(ewalletAccount.toString()).append("; ");
     if (merchantOrder != null) sb.append("merchantOrder=").append(merchantOrder.toString()).append("; ");
     if (paymentData != null) sb.append("paymentData=").append(paymentData.toString()).append("; ");
     if (paymentMethod != null) sb.append("paymentMethod=").append(paymentMethod.toString()).append("; ");
     sb.append(")");
     return sb.toString();
  }

}

