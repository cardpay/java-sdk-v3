/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import com.google.gson.annotations.SerializedName;
import lombok.Data;

@Data

public class ThreeDSecureResponse {
  @SerializedName("card_enrollment")
  private String cardEnrollment = null;
  @SerializedName("cardholder_info")
  private String cardholderInfo = null;
  @SerializedName("cavv")
  private String cavv = null;
  @SerializedName("cavv_algorithm")
  private String cavvAlgorithm = null;
  @SerializedName("challenge_cancel")
  private String challengeCancel = null;
  @SerializedName("eci")
  private String eci = null;
  @SerializedName("pa_res")
  private String paRes = null;
  @SerializedName("protocol_version")
  private String protocolVersion = null;
  @SerializedName("status")
  private String status = null;
  @SerializedName("status_reason")
  private String statusReason = null;
  @SerializedName("three_d_secure2_passed")
  private Boolean threeDSecure2Passed = null;
  @SerializedName("three_d_secure_flow")
  private String threeDSecureFlow = null;
  @SerializedName("xid")
  private String xid = null;
  
  public void setCardEnrollment(String cardEnrollment) {
      this.cardEnrollment = cardEnrollment;
  }

  /**
   * @param cardEnrollment Card enrollment in 3DS flow, possible values are: S - 3D Secure Skipped, N - 3D Secure not enrolled, Y - 3D Secure enrolled
   * @return bean instance
   **/
  public ThreeDSecureResponse cardEnrollment(String cardEnrollment) {
      this.cardEnrollment = cardEnrollment;
      return this;
  }

  
  public void setCardholderInfo(String cardholderInfo) {
      this.cardholderInfo = cardholderInfo;
  }

  /**
   * @param cardholderInfo Text provided by the ACS/Issuer to Cardholder during a Frictionless transaction  by the ACS.
   * @return bean instance
   **/
  public ThreeDSecureResponse cardholderInfo(String cardholderInfo) {
      this.cardholderInfo = cardholderInfo;
      return this;
  }

  
  public void setCavv(String cavv) {
      this.cavv = cavv;
  }

  /**
   * @param cavv Cardholder authentication verification value
   * @return bean instance
   **/
  public ThreeDSecureResponse cavv(String cavv) {
      this.cavv = cavv;
      return this;
  }

  
  public void setCavvAlgorithm(String cavvAlgorithm) {
      this.cavvAlgorithm = cavvAlgorithm;
  }

  /**
   * @param cavvAlgorithm CAVV algorithm
   * @return bean instance
   **/
  public ThreeDSecureResponse cavvAlgorithm(String cavvAlgorithm) {
      this.cavvAlgorithm = cavvAlgorithm;
      return this;
  }

  
  public void setChallengeCancel(String challengeCancel) {
      this.challengeCancel = challengeCancel;
  }

  /**
   * @param challengeCancel Indicator informing that the authentication has been cancelled
   * @return bean instance
   **/
  public ThreeDSecureResponse challengeCancel(String challengeCancel) {
      this.challengeCancel = challengeCancel;
      return this;
  }

  
  public void setEci(String eci) {
      this.eci = eci;
  }

  /**
   * @param eci The electronic commerce indicator
   * @return bean instance
   **/
  public ThreeDSecureResponse eci(String eci) {
      this.eci = eci;
      return this;
  }

  
  public void setPaRes(String paRes) {
      this.paRes = paRes;
  }

  /**
   * @param paRes PaRes bank authentication result
   * @return bean instance
   **/
  public ThreeDSecureResponse paRes(String paRes) {
      this.paRes = paRes;
      return this;
  }

  
  public void setProtocolVersion(String protocolVersion) {
      this.protocolVersion = protocolVersion;
  }

  /**
   * @param protocolVersion Protocol version identifier
   * @return bean instance
   **/
  public ThreeDSecureResponse protocolVersion(String protocolVersion) {
      this.protocolVersion = protocolVersion;
      return this;
  }

  
  public void setStatus(String status) {
      this.status = status;
  }

  /**
   * @param status 3DS status (from PaRes for 3Ds 1.0, ARes message for 3Ds 2.0) (possible values Y,A,U)
   * @return bean instance
   **/
  public ThreeDSecureResponse status(String status) {
      this.status = status;
      return this;
  }

  
  public void setStatusReason(String statusReason) {
      this.statusReason = statusReason;
  }

  /**
   * @param statusReason Provides information on why the Status field has the specified value
   * @return bean instance
   **/
  public ThreeDSecureResponse statusReason(String statusReason) {
      this.statusReason = statusReason;
      return this;
  }

  
  public void setThreeDSecure2Passed(Boolean threeDSecure2Passed) {
      this.threeDSecure2Passed = threeDSecure2Passed;
  }

  /**
   * @param threeDSecure2Passed Sign of trying to pass 3ds2
   * @return bean instance
   **/
  public ThreeDSecureResponse threeDSecure2Passed(Boolean threeDSecure2Passed) {
      this.threeDSecure2Passed = threeDSecure2Passed;
      return this;
  }

  
  public void setThreeDSecureFlow(String threeDSecureFlow) {
      this.threeDSecureFlow = threeDSecureFlow;
  }

  /**
   * @param threeDSecureFlow Possible values: 3DS1 - 3DS 1.0 flow, 3DS2C - 3DS 2.0 challenge flow, 3DS2F - 3DS 2.0 frictionless flow
   * @return bean instance
   **/
  public ThreeDSecureResponse threeDSecureFlow(String threeDSecureFlow) {
      this.threeDSecureFlow = threeDSecureFlow;
      return this;
  }

  
  public void setXid(String xid) {
      this.xid = xid;
  }

  /**
   * @param xid Transaction Id in PaRes
   * @return bean instance
   **/
  public ThreeDSecureResponse xid(String xid) {
      this.xid = xid;
      return this;
  }


  @Override
  public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append("ThreeDSecureResponse( ");
     
     if (cardEnrollment != null) sb.append("cardEnrollment=").append(cardEnrollment.toString()).append("; ");
     if (cardholderInfo != null) sb.append("cardholderInfo=").append(cardholderInfo.toString()).append("; ");
     if (cavv != null) sb.append("cavv=").append(cavv.toString()).append("; ");
     if (cavvAlgorithm != null) sb.append("cavvAlgorithm=").append(cavvAlgorithm.toString()).append("; ");
     if (challengeCancel != null) sb.append("challengeCancel=").append(challengeCancel.toString()).append("; ");
     if (eci != null) sb.append("eci=").append(eci.toString()).append("; ");
     if (paRes != null) sb.append("paRes=").append(paRes.toString()).append("; ");
     if (protocolVersion != null) sb.append("protocolVersion=").append(protocolVersion.toString()).append("; ");
     if (status != null) sb.append("status=").append(status.toString()).append("; ");
     if (statusReason != null) sb.append("statusReason=").append(statusReason.toString()).append("; ");
     if (threeDSecure2Passed != null) sb.append("threeDSecure2Passed=").append(threeDSecure2Passed.toString()).append("; ");
     if (threeDSecureFlow != null) sb.append("threeDSecureFlow=").append(threeDSecureFlow.toString()).append("; ");
     if (xid != null) sb.append("xid=").append(xid.toString()).append("; ");
     sb.append(")");
     return sb.toString();
  }

}

