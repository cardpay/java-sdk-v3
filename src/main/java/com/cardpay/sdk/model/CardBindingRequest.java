/*
 * CardPay REST API
 * Welcome to the CardPay REST API. The CardPay API uses HTTP verbs and a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) resources endpoint structure (see more info about REST). Request and response payloads are formatted as JSON. Merchant uses API to create payments, refunds, payouts or recurrings, check or update transaction status and get information about created transactions. In API authentication process based on [OAuth 2.0](https://oauth.net/2/) standard. For recent changes see changelog section.
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import com.google.gson.annotations.SerializedName;
import lombok.Data;

@Data

public class CardBindingRequest {
  @SerializedName("request")
  private Request request = null;
  @SerializedName("card_account")
  private CardBindingCardAccount cardAccount = null;
  @SerializedName("customer")
  private RecurringCustomer customer = null;
  @SerializedName("merchant_order")
  private CardBindingMerchantOrder merchantOrder = null;
  @SerializedName("mobile_token")
  private String mobileToken = null;
  @SerializedName("recurring_data")
  private CardBindingData recurringData = null;
  @SerializedName("return_urls")
  private ReturnUrls returnUrls = null;
  
  public void setRequest(Request request) {
      this.request = request;
  }

  /**
   * @param request Request
   * @return bean instance
   **/
  public CardBindingRequest request(Request request) {
      this.request = request;
      return this;
  }

  
  public void setCardAccount(CardBindingCardAccount cardAccount) {
      this.cardAccount = cardAccount;
  }

  /**
   * @param cardAccount Information about card
   * @return bean instance
   **/
  public CardBindingRequest cardAccount(CardBindingCardAccount cardAccount) {
      this.cardAccount = cardAccount;
      return this;
  }

  
  public void setCustomer(RecurringCustomer customer) {
      this.customer = customer;
  }

  /**
   * @param customer Customer data
   * @return bean instance
   **/
  public CardBindingRequest customer(RecurringCustomer customer) {
      this.customer = customer;
      return this;
  }

  
  public void setMerchantOrder(CardBindingMerchantOrder merchantOrder) {
      this.merchantOrder = merchantOrder;
  }

  /**
   * @param merchantOrder Merchant order data
   * @return bean instance
   **/
  public CardBindingRequest merchantOrder(CardBindingMerchantOrder merchantOrder) {
      this.merchantOrder = merchantOrder;
      return this;
  }

  
  public void setMobileToken(String mobileToken) {
      this.mobileToken = mobileToken;
  }

  /**
   * @param mobileToken Mobile token
   * @return bean instance
   **/
  public CardBindingRequest mobileToken(String mobileToken) {
      this.mobileToken = mobileToken;
      return this;
  }

  
  public void setRecurringData(CardBindingData recurringData) {
      this.recurringData = recurringData;
  }

  /**
   * @param recurringData Data of recurring payment
   * @return bean instance
   **/
  public CardBindingRequest recurringData(CardBindingData recurringData) {
      this.recurringData = recurringData;
      return this;
  }

  
  public void setReturnUrls(ReturnUrls returnUrls) {
      this.returnUrls = returnUrls;
  }

  /**
   * @param returnUrls Merchant Return URLs
   * @return bean instance
   **/
  public CardBindingRequest returnUrls(ReturnUrls returnUrls) {
      this.returnUrls = returnUrls;
      return this;
  }


  @Override
  public String toString() {
     StringBuilder sb = new StringBuilder();
     sb.append("CardBindingRequest( ");
     
     if (request != null) sb.append("request=").append(request.toString()).append("; ");
     if (cardAccount != null) sb.append("cardAccount=").append(cardAccount.toString()).append("; ");
     if (customer != null) sb.append("customer=").append(customer.toString()).append("; ");
     if (merchantOrder != null) sb.append("merchantOrder=").append(merchantOrder.toString()).append("; ");
     if (mobileToken != null) sb.append("mobileToken=").append(mobileToken.toString()).append("; ");
     if (recurringData != null) sb.append("recurringData=").append(recurringData.toString()).append("; ");
     if (returnUrls != null) sb.append("returnUrls=").append(returnUrls.toString()).append("; ");
     sb.append(")");
     return sb.toString();
  }

}

